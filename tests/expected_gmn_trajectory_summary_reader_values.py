"""
This module stores constant expected properties for testing the model data file.
"""
import pandas as pd  # type: ignore
from numpy import dtype

EXPECTED_COLUMN_NAMES = [
    "Beginning (Julian date)",
    "Beginning (UTC Time)",
    "IAU (No)",
    "IAU (code)",
    "Sol lon (deg)",
    "App LST (deg)",
    "RAgeo (deg)",
    "+/- (sigma)",
    "DECgeo (deg)",
    "+/- (sigma.1)",
    "LAMgeo (deg)",
    "+/- (sigma.2)",
    "BETgeo (deg)",
    "+/- (sigma.3)",
    "Vgeo (km/s)",
    "+/- (sigma.4)",
    "LAMhel (deg)",
    "+/- (sigma.5)",
    "BEThel (deg)",
    "+/- (sigma.6)",
    "Vhel (km/s)",
    "+/- (sigma.7)",
    "a (AU)",
    "+/- (sigma.8)",
    "e",
    "+/- (sigma.9)",
    "i (deg)",
    "+/- (sigma.10)",
    "peri (deg)",
    "+/- (sigma.11)",
    "node (deg)",
    "+/- (sigma.12)",
    "Pi (deg)",
    "+/- (sigma.13)",
    "b (deg)",
    "+/- (sigma.14)",
    "q (AU)",
    "+/- (sigma.15)",
    "f (deg)",
    "+/- (sigma.16)",
    "M (deg)",
    "+/- (sigma.17)",
    "Q (AU)",
    "+/- (sigma.18)",
    "n (deg/day)",
    "+/- (sigma.19)",
    "T (years)",
    "+/- (sigma.20)",
    "TisserandJ",
    "+/- (sigma.21)",
    "RAapp (deg)",
    "+/- (sigma.22)",
    "DECapp (deg)",
    "+/- (sigma.23)",
    "Azim +E (of N deg)",
    "+/- (sigma.24)",
    "Elev (deg)",
    "+/- (sigma.25)",
    "Vinit (km/s)",
    "+/- (sigma.26)",
    "Vavg (km/s)",
    "+/- (sigma.27)",
    "LatBeg (+N deg)",
    "+/- (sigma.28)",
    "LonBeg (+E deg)",
    "+/- (sigma.29)",
    "HtBeg (km)",
    "+/- (sigma.30)",
    "LatEnd (+N deg)",
    "+/- (sigma.31)",
    "LonEnd (+E deg)",
    "+/- (sigma.32)",
    "HtEnd (km)",
    "+/- (sigma.33)",
    "Duration (sec)",
    "Peak (AbsMag)",
    "Peak Ht (km)",
    "F (param)",
    "Mass kg (tau=0.7%)",
    "Qc (deg)",
    "MedianFitErr (arcsec)",
    "Beg in (FOV)",
    "End in (FOV)",
    "Num (stat)",
    "Participating (stations)",
    "Schema (version)",
]
EXPECTED_COLUMN_NAMES_CAMEL_CASE = [
    "beginning_julian_date",
    "beginning_utc_time",
    "iau_no",
    "iau_code",
    "sol_lon_deg",
    "app_lst_deg",
    "rageo_deg",
    "sigma",
    "decgeo_deg",
    "sigma_1",
    "lamgeo_deg",
    "sigma_2",
    "betgeo_deg",
    "sigma_3",
    "vgeo_km_s",
    "sigma_4",
    "lamhel_deg",
    "sigma_5",
    "bethel_deg",
    "sigma_6",
    "vhel_km_s",
    "sigma_7",
    "a_au",
    "sigma_8",
    "e",
    "sigma_9",
    "i_deg",
    "sigma_10",
    "peri_deg",
    "sigma_11",
    "node_deg",
    "sigma_12",
    "pi_deg",
    "sigma_13",
    "b_deg",
    "sigma_14",
    "q_au",
    "sigma_15",
    "f_deg",
    "sigma_16",
    "m_deg",
    "sigma_17",
    "q_au_",
    "sigma_18",
    "n_deg_day",
    "sigma_19",
    "t_years",
    "sigma_20",
    "tisserandj",
    "sigma_21",
    "raapp_deg",
    "sigma_22",
    "decapp_deg",
    "sigma_23",
    "azim_e_of_n_deg",
    "sigma_24",
    "elev_deg",
    "sigma_25",
    "vinit_km_s",
    "sigma_26",
    "vavg_km_s",
    "sigma_27",
    "latbeg_n_deg",
    "sigma_28",
    "lonbeg_e_deg",
    "sigma_29",
    "htbeg_km",
    "sigma_30",
    "latend_n_deg",
    "sigma_31",
    "lonend_e_deg",
    "sigma_32",
    "htend_km",
    "sigma_33",
    "duration_sec",
    "peak_absmag",
    "peak_ht_km",
    "f_param",
    "mass_kg_tau_0_7",
    "qc_deg",
    "medianfiterr_arcsec",
    "beg_in_fov",
    "end_in_fov",
    "num_stat",
    "participating_stations",
    "schema_version",
]
EXPECTED_DTYPES = [
    dtype("float64"),
    dtype("<M8[ns]"),
    dtype("int64"),
    pd.StringDtype(),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("bool"),
    dtype("bool"),
    dtype("int64"),
    dtype("O"),
    pd.StringDtype(),
]
