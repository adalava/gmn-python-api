"""
This module stores constant expected properties for testing
test_data/test_short_traj_summary.txt
"""
import numpy as np
import pandas as pd  # type: ignore
from numpy import dtype

from gmn_python_api import trajectory_summary_reader as gtsr

EXPECTED_COLUMN_NAMES = [
    "Beginning (Julian date)",
    "Beginning (UTC Time)",
    "IAU (No)",
    "IAU (code)",
    "Sol lon (deg)",
    "App LST (deg)",
    "RAgeo (deg)",
    "+/- (sigma)",
    "DECgeo (deg)",
    "+/- (sigma.1)",
    "LAMgeo (deg)",
    "+/- (sigma.2)",
    "BETgeo (deg)",
    "+/- (sigma.3)",
    "Vgeo (km/s)",
    "+/- (sigma.4)",
    "LAMhel (deg)",
    "+/- (sigma.5)",
    "BEThel (deg)",
    "+/- (sigma.6)",
    "Vhel (km/s)",
    "+/- (sigma.7)",
    "a (AU)",
    "+/- (sigma.8)",
    "e",
    "+/- (sigma.9)",
    "i (deg)",
    "+/- (sigma.10)",
    "peri (deg)",
    "+/- (sigma.11)",
    "node (deg)",
    "+/- (sigma.12)",
    "Pi (deg)",
    "+/- (sigma.13)",
    "b (deg)",
    "+/- (sigma.14)",
    "q (AU)",
    "+/- (sigma.15)",
    "f (deg)",
    "+/- (sigma.16)",
    "M (deg)",
    "+/- (sigma.17)",
    "Q (AU)",
    "+/- (sigma.18)",
    "n (deg/day)",
    "+/- (sigma.19)",
    "T (years)",
    "+/- (sigma.20)",
    "TisserandJ",
    "+/- (sigma.21)",
    "RAapp (deg)",
    "+/- (sigma.22)",
    "DECapp (deg)",
    "+/- (sigma.23)",
    "Azim +E (of N deg)",
    "+/- (sigma.24)",
    "Elev (deg)",
    "+/- (sigma.25)",
    "Vinit (km/s)",
    "+/- (sigma.26)",
    "Vavg (km/s)",
    "+/- (sigma.27)",
    "LatBeg (+N deg)",
    "+/- (sigma.28)",
    "LonBeg (+E deg)",
    "+/- (sigma.29)",
    "HtBeg (km)",
    "+/- (sigma.30)",
    "LatEnd (+N deg)",
    "+/- (sigma.31)",
    "LonEnd (+E deg)",
    "+/- (sigma.32)",
    "HtEnd (km)",
    "+/- (sigma.33)",
    "Duration (sec)",
    "Peak (AbsMag)",
    "Peak Ht (km)",
    "F (param)",
    "Mass kg (tau=0.7%)",
    "Qc (deg)",
    "MedianFitErr (arcsec)",
    "Beg in (FOV)",
    "End in (FOV)",
    "Num (stat)",
    "Participating (stations)",
    "Schema (version)",
]
EXPECTED_DTYPES = [
    dtype("float64"),
    dtype("<M8[ns]"),
    dtype("int64"),
    pd.StringDtype(),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("float64"),
    dtype("bool"),
    dtype("bool"),
    dtype("int64"),
    dtype("O"),
    dtype("O"),
]
EXPECTED_MIN_VALUES = [
    2459527.994467242,
    pd.to_datetime("2021-11-09 11:52:01.969722", format=gtsr.DATETIME_FORMAT),
    -1,
    "LEO",
    227.001743,
    119.358504,
    83.51609,
    0.2768,
    29.51934,
    0.0298,
    86.28207,
    0.2319,
    14.88362,
    0.0934,
    44.74423,
    0.0834,
    28.9348,
    0.4326,
    26.36018,
    0.1577,
    38.82593,
    0.0871,
    3.126113,
    0.077,
    0.683289,
    0.0077,
    73.518553,
    0.1634,
    177.298332,
    0.9242,
    227.004293,
    0.0,
    44.305351,
    0.9242,
    -73.295157,
    0.4251,
    0.541694,
    0.0006,
    2.705011,
    0.9242,
    0.371719,
    0.1133,
    5.262151,
    0.1544,
    0.029969,
    0.0063,
    5.527231,
    0.2061,
    0.283592,
    0.0416,
    85.97002,
    0.2739,
    29.39501,
    0.0294,
    12.73618,
    0.2204,
    54.74144,
    0.1652,
    46.00611,
    0.0823,
    44.52619,
    0.1154,
    34.175497,
    0.0001,
    -107.532859,
    0.0003,
    91.9748,
    0.04,
    34.179095,
    0.0001,
    -107.588298,
    0.0002,
    84.386,
    0.01,
    0.2,
    -1.57,
    87.8292,
    0.382,
    1.97e-05,
    20.74,
    np.float64(np.nan),
    True,
    True,
    3,
    ["S0004", "US0008", "US000H", "USL00"],
    "2.0",
]

EXPECTED_MAX_VALUES = [
    2459527.9953034143,
    pd.to_datetime("2021-11-09 11:53:14.214995", format=gtsr.DATETIME_FORMAT),
    13,
    "LEO",
    227.002584,
    121.794573,
    145.66771,
    1.154,
    64.29188,
    0.9558,
    138.03311,
    0.7112,
    42.8743,
    0.9377,
    67.11579,
    0.4581,
    138.22871,
    1.8299,
    65.66721,
    1.0873,
    41.28938,
    0.3222,
    10.264988,
    9.0313,
    0.917157,
    0.0249,
    153.634641,
    0.4685,
    267.238619,
    2.7034,
    227.007019,
    0.0,
    134.243024,
    2.7034,
    1.199436,
    2.1843,
    0.990074,
    0.0207,
    314.770593,
    2.7034,
    359.134926,
    0.709,
    19.67959,
    18.0541,
    0.178319,
    0.0167,
    32.888065,
    67.2257,
    1.130512,
    0.1679,
    146.15468,
    1.1225,
    64.23205,
    0.9331,
    334.7559,
    1.6582,
    66.79747,
    0.3594,
    68.17846,
    0.4492,
    67.01677,
    0.4789,
    35.70875,
    0.0015,
    -105.08759,
    0.0015,
    113.3855,
    0.16,
    35.665574,
    0.0016,
    -105.110364,
    0.001,
    101.239,
    0.17,
    0.37,
    -0.56,
    108.7468,
    0.579,
    9.94e-05,
    82.7,
    np.float64(np.nan),
    True,
    True,
    4,
    ["S000G", "US000K", "USL00"],
    "2.0",
]
